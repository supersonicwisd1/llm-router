import { BaseModelClientImpl, GenerationOptions } from './base-client';
import { ModelResponse, Provider } from '@/lib/types';
import { Logger } from '@/utils/logger';

// Test client for development/testing without API keys
export class TestModelClient extends BaseModelClientImpl {
  public readonly provider = Provider.OPENAI;
  public readonly modelName: string;
  
  private logger: Logger;

  constructor(modelName: string) {
    super();
    this.modelName = modelName;
    this.logger = new Logger(`Test:${modelName}`);
  }

  async generateResponse(prompt: string, options?: GenerationOptions): Promise<ModelResponse> {
    const startTime = Date.now();
    const mergedOptions = this.mergeOptions(options);
    this.validateOptions(mergedOptions);

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 100));

    try {
      this.logger.info('Generating test response', { promptLength: prompt.length, options: mergedOptions });

      // Generate a mock response based on the prompt
      const content = this.generateMockResponse(prompt);
      const inputTokens = this.estimateTokens(prompt);
      const outputTokens = this.estimateTokens(content);
      const latencyMs = Date.now() - startTime;
      const costUsd = 0.001; // Mock cost

      this.logger.info('Test response generated successfully', {
        inputTokens,
        outputTokens,
        costUsd,
        latencyMs,
      });

      return this.createResponse(content, inputTokens, outputTokens, costUsd, latencyMs, {
        isTest: true,
        model: this.modelName,
      });

    } catch (error) {
      this.logger.error('Failed to generate test response', error);
      this.handleError(error, 'generateResponse');
    }
  }

  async *generateResponseStream(prompt: string, options?: GenerationOptions): AsyncGenerator<string> {
    const mergedOptions = this.mergeOptions(options);
    this.validateOptions(mergedOptions);

    try {
      this.logger.info('Starting test streaming response', { promptLength: prompt.length });

      const content = this.generateMockResponse(prompt);
      const words = content.split(' ');
      
      // Stream the response word by word with small delays
      for (const word of words) {
        yield word + ' ';
        await new Promise(resolve => setTimeout(resolve, 50));
      }

      this.logger.info('Test streaming response completed');

    } catch (error) {
      this.logger.error('Failed to generate test streaming response', error);
      this.handleError(error, 'generateResponseStream');
    }
  }

  supportsCapability(): boolean {
    // Test client supports all capabilities
    return true;
  }

  // Override availability check for test client
  async isAvailable(): Promise<boolean> {
    return true; // Test client is always available
  }

  private generateMockResponse(prompt: string): string {
    const promptLower = prompt.toLowerCase();
    
    if (promptLower.includes('code') || promptLower.includes('function') || promptLower.includes('program')) {
      return `Here's a sample code implementation for your request:

\`\`\`python
def example_function():
    """Sample function based on your prompt."""
    result = "Hello from test model!"
    return result

# Usage
print(example_function())
\`\`\`

This is a test response from ${this.modelName}. In production, you would get a real implementation.`;
    
    } else if (promptLower.includes('summarize') || promptLower.includes('summary')) {
      return `Here's a summary of your request:

**Key Points:**
- This is a test summary response
- Generated by ${this.modelName} test client
- In production, you would get a real summary

**Summary:** This is a mock response for testing purposes.`;
    
    } else if (promptLower.includes('question') || promptLower.includes('what') || promptLower.includes('how')) {
      return `Here's an answer to your question:

**Answer:** This is a test response from the ${this.modelName} model. In production, you would get a comprehensive answer based on the model's training data.

**Note:** This is a mock response for development and testing purposes.`;
    
    } else {
      return `Here's a creative response to your prompt:

**Response:** This is a test response generated by the ${this.modelName} model. In production, you would get a creative, contextually relevant response.

**Features:**
- Generated by test client
- Simulates real model behavior
- Useful for development and testing

This mock response demonstrates the structure and format you can expect from the real model.`;
    }
  }
}
